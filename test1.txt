// sample1, ST
0011000000000000
1111000000100101

// sample2
0011000000000000
0010000000001000
0101010010100000
0001011000000000
0001100011000011
0101001011000100
0101001001000000
0000010000000001
0001010010100001
1111000000100101
0001001000110100


// NOT R1 R2 111111 // R1 = NOT(R2) = NOT(x7777) = x8888
1001001010111111
1111000000100101

// R0 = NOT(R0)
1001000000111111
1111000000100101

// ADD R1, R2, R3 // R1 = R2 + R3 = 0x7777 + 0x7777 = 0xEEEE
// ADD R5, R6, 0x04 // R5 = 0x7777 + 0x0C = 0x7783
0001001010000011
0001101110101100
1111000000100101

/* Results: 
R0 = x7777
R1 = xEEEE
R2 = x7777
R3 = x7777
R4 = x7777
R5 = x7783
R6 = x7777
R7 = x7777
*/

// (Continue) AND R2, R2, R1 // R2 = x7777 & xEEEE = x6666
0001001010000011
0001101110101100
0101010010000001
1111000000100101

/* Results: 
R0 = x7777
R1 = xEEEE
R2 = x6666
R3 = x7777
R4 = x7777
R5 = x7783
R6 = x7777
R7 = x7777
*/

// ADD, AND, NOT, TRAP
0001001010000011
0001101110101100
0101010010000001
1001000000111111
1111000000100101
/* Result
R0 = x8888
R1 = xEEEE
R2 = x6666
R3 = x7777
R4 = x7777
R5 = x7783
R6 = x7777
R7 = x7777
Total number of instructions: 5
*/

// LD R6, #3 // R6 = 0x903F // condition code = N
0010110000000011 
0001001010000011
0001101110101100
0101010010000001
1001000000111111
1111000000100101
/* result
R0 = x8888
R1 = xEEEE
R2 = x6666
R3 = x7777
R4 = x7777
R5 = x904B
R6 = x903F
R7 = x7777
*/

/* LDI */
1010111000000010
0001101110101100
0101010010000001
0111011101111000 
1001000000111111
1111000000100101
/*********/
.x7777 1010111000000010 // LDI R7, #2 // PCoffset9 = 0x777A // instr[0x777A] = instr[PCoffset9 - DEFAULT_MEMORY]
// mem[x777A] = strtoull(instr[PCoffset9 - DEFAULT_MEMORY].c_str(), NULL, 2) = 0x7778
// mem[x7778] = strtoull(instr[0x7778 - DEFAULT_MEMORY].c_str(), NULL, 2)
// mem[x7778] = strtoull(instr[strtoull(instr[PCoffset9 - DEFAULT_MEMORY].c_str(), NULL, 2) - DEFAULT_MEMORY].c_str(), NULL, 2)
.x7778 0001101110101100 // 0x1BAC
.x7779 0101010010000001 //
.x777A 0111011101111000 // 0x7778 // R7 = mem[0x7778] = 0x1BAC
.x777B 1001000000111111 //
.x777C 1111000000100101 // HALT
// instruction [ins_cout + PCoffset9 + 1] = "0111011101111000"
// GetNum(instruction [ins_cout + PCoffset9 + 1]) = 
// strtoull(str.c_str(), NULL, 2) = 30584 // 2's complement = 0111011101111000 // hex = 0x7778
/* Result
R0 = x8888
R1 = x7777
R2 = x7777
R3 = x7777
R4 = x7777
R5 = x7783
R6 = x7777
R7 = x1BAC
*/

/* LDR */ 
.x7777 0110 100 010 000011 // LDR  R4, R2, 0x0003 // R4 = mem[x777A] = x7778
.x7778 0001 101 110 1 01100 // ADD R5, R6, imm5 = 0x000C //R5 = x7783
.x7779 0101 010 010 0 00 001 // AND R2, R2, R1 // R2 = R2 & R1 = x7777
.x777A 0111 011101111000 // STR (x7778)
.x777B 1001 000 000 111111 // NOT R0, R0 // R0 = x8888
.x777C 1111 000000100101
// R4 = mem[R2 + 3] = mem[.0x777A] // DR_num = 100 = 4, //BaseR = 010 = 2, offset6 = 3 = 000011
//R2 = registers[BaseR].GetValue(BaseR) = 0x7777
//R2 + 3 - 0x7777 = 3
//registers[DR_num].SetValue(  GetNum(instruction[ins_count + R2 + offset6 - 0x7777])  )
//R4 = 0x7778
0110100010000011
0001101110101100
0101010010000001
0111011101111000 
1001000000111111
1111000000100101
/* Result
R0 = x8888
R1 = x7777
R2 = x7777
R3 = x7777
R4 = x7778
R5 = x7783
R6 = x7777
R7 = x7777
*/

/* LEA */

.x7777 0101 010 010 1 00000 // AND R2, R2, 0 // R2 = 0
.x7778 0001 101 110 1 11100 // ADD R5, R6, #-4 (0xFFFC) // R5 = x7773
.x7779 0101 010 010 0 00 001 // AND R2, R2, R1 // R2 = 0x0000
.x777A 0101 010 010 1 00000 // // AND R2, R2, 0 // R2 = 0
.x777B 1110 110 111111101 // LEA R6, -3 // LEA R6, FFFD // R6 = x7779
.x777C 1001000000111111 // NOT R0, R0
.x777D 1111000000100101
/*******/
0101010010100000
0001101110111100
0101010010000001
0101010010100000
1110110111111101
1001000000111111
1111000000100101
/* result
R0 = x8888
R1 = x0000 (?????)
R2 = x7777
R3 = x7777
R4 = x7777
R5 = x7773
R6 = x7779
R7 = x7777




























